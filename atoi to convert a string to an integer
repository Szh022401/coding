Exercise 1: atoi

Implement atoi to convert a string to an integer.
Assumption: The string IS a VALID integral number.

Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.

Corner cases:

null or empty string

leading spaces

sign, + or -

trailing spaces or other characters

overflow an integer

overflow a long

null, “” → 0

“123” → 123

“+123” → 123, “-123” → -123, “+-123” → 0

“123 ” → 123, “123a” → 123, “a123” → 0, “+ 123” → 0

Integer.MAX_VALUE

Integer.MAX_VALUE
public class Solution {
    public int myAtoi(String str) {
        if (str == null || str.length() == 0) { // Corner case 1 如果是0 还在空
            return 0;
        }
        
        int n = str.length();
        int i = 0;
        while (i < n && str.charAt(i) == ' ') { // Corner case 2 如果前面有很多空格 直接跳过
            i++;
        }
        
        boolean positive = true;
        if (i < n && (str.charAt(i) == '+' || str.charAt(i) == '-')) { // Corner case 3 如果出现+ - 
            positive = (str.charAt(i) == '+');
            i++;
        }
        
        long sum = 0; // Corner case 5 // 有可能overflow 所以要用long
        while (i < n && str.charAt(i) >= '0' && str.charAt(i) <= '9') { // Corner case 4 0 - 9 范围
            sum = sum * 10 + (str.charAt(i) - '0');
            if (positive && sum > (long) Integer.MAX_VALUE) { // Corner case 5/6;
                return Integer.MAX_VALUE;
            }
            if (!positive && -sum < (long) Integer.MIN_VALUE) { // Corner case 5/6;
                return Integer.MIN_VALUE;
            }
            i++;
        }
        
        sum = positive ? sum : -sum; // Corner case 3 // 如果是true 正 false false
        return (int)sum;
    }
}

