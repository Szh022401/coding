class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    int numNodesLeft;  // Assuming we might also want to store the number of nodes in the left subtree, as per your previous question

    TreeNode(int x) {
        val = x;
    }
}

public class Solution {
    // Method to find the TreeNode with the maximum difference in the number of descendants between its left and right subtrees
    public TreeNode maxDiff(TreeNode root) {
        int[] globalMax = new int[1]; // Array to store the max difference
        TreeNode[] solu = new TreeNode[1]; // Array to store the node with max difference
        maxDiffNode(root, globalMax, solu); // Starting the recursive method
        return solu[0]; // Returning the node with the max difference
    }

    // Recursive helper method to calculate the difference and find the node
    private int maxDiffNode(TreeNode root, int[] globalMax, TreeNode[] solu) {
        if (root == null) return 0;

        int leftTotal = maxDiffNode(root.left, globalMax, solu);
        int rightTotal = maxDiffNode(root.right, globalMax, solu);

        int currentDiff = Math.abs(leftTotal - rightTotal);
        if (currentDiff > globalMax[0]) {
            globalMax[0] = currentDiff;
            solu[0] = root;
        }

        return leftTotal + rightTotal + 1; // Return the total count of nodes under this root
    }


    // Method to use this class and find the node with max difference
    public static void main(String[] args) {
        BinaryTree binaryTree = new BinaryTree();

        // Example to create a tree:
        //       1
        //      / \
        //     2   3
        //    /|   |\
        //   4 5   6 7
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        TreeNode resultNode = binaryTree.findMaxDifferenceNode(root);
        System.out.println("Node with max difference: " + (resultNode != null ? resultNode.val : "None"));
    }
}
