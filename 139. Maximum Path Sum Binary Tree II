139. Maximum Path Sum Binary Tree II
Hard
Given a binary tree in which each node contains an integer number. Find the maximum possible sum from any node to any node (the start node and the end node can be the same). 

Assumptions

​The root of the given binary tree is not null
Examples

   -1

  /    \

2      11

     /    \

    6    -14

one example of paths could be -14 -> 11 -> -1 -> 2
/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public int maxPathSum(TreeNode root) {
    // Write your solution here
    int [] ans = new int[]{Integer.MIN_VALUE};
    help(root,ans);
    return ans[0];
  }
  private int help(TreeNode root ,int [] ans){
    if(root == null){
      return 0;
    }
    int left = help(root.left,ans);
    int right = help(root.right,ans);
    left = left < 0 ? 0 : left; // 小于0 不要
    right = right < 0 ? 0 : right; // 小于0 不要
    int cur  = root.key + left + right;// 就是 直上 下 + 自己 想个人字形的 加法
    ans[0] = Math.max(cur,ans[0]);//更新最大值
    return root.key + Math.max(left , right);// 返回 自己 加上左右的最大值
  }
}
